name: Build Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm

      - name: 🏗 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: 🔧 Configure Java Environment
        run: |
          # Get the Java home from the setup-java action
          echo "Initial JAVA_HOME: $JAVA_HOME"
          
          # Verify and fix Java installation
          if [ -d "$JAVA_HOME" ] && [ -f "$JAVA_HOME/bin/java" ]; then
            echo "Java installation found at: $JAVA_HOME"
          else
            echo "Java installation issue detected. Searching for alternatives..."
            
            # Try multiple search strategies
            for search_path in \
              "/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17*/x64" \
              "/usr/lib/jvm/temurin-17-jdk-amd64" \
              "/usr/lib/jvm/java-17-openjdk-amd64" \
              $(find /opt/hostedtoolcache -name "*17*" -type d 2>/dev/null | grep -i java | head -3) \
              $(find /usr/lib/jvm -name "*17*" -type d 2>/dev/null | head -3); do
              
              # Expand glob patterns
              for possible_java in $search_path; do
                if [ -d "$possible_java" ] && [ -f "$possible_java/bin/java" ]; then
                  export JAVA_HOME="$possible_java"
                  echo "Found working Java installation at: $JAVA_HOME"
                  break 2
                fi
              done
            done
          fi
          
          # Final verification
          if [ ! -f "$JAVA_HOME/bin/java" ]; then
            echo "ERROR: Could not find a valid Java installation"
            echo "Available Java installations:"
            find /opt/hostedtoolcache /usr/lib/jvm -name "java" -type f 2>/dev/null | head -10 || true
            exit 1
          fi
          
          # Set environment variables for subsequent steps
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
          
          # Verify installation
          echo "Final JAVA_HOME: $JAVA_HOME"
          "$JAVA_HOME/bin/java" -version
          "$JAVA_HOME/bin/javac" -version

      - name: 🏗 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔐 Create .env from GitHub Secrets
        env:
          MOBILE_API_BASE_URL: ${{ secrets.MOBILE_API_BASE_URL }}
          MOBILE_API_KEY: ${{ secrets.MOBILE_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        run: |
          # Create .env only if not present in repo
          if [ ! -f .env ]; then
            if [ -z "$MOBILE_API_BASE_URL" ] || [ -z "$MOBILE_API_KEY" ]; then
              echo "Missing required secrets: MOBILE_API_BASE_URL and/or MOBILE_API_KEY" >&2
              exit 1
            fi
            cat > .env <<EOF
          MOBILE_API_BASE_URL=$MOBILE_API_BASE_URL
          MOBILE_API_KEY=$MOBILE_API_KEY
          ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
          EOF
          fi
          # Copy to android as a safety net for path resolution during bundling
          cp .env android/.env

      - name: 🔧 Install Expo CLI
        run: npm install -g @expo/ngrok@^4.1.0 expo-cli eas-cli

      - name: 🏗 Prebuild Android
        run: npx expo prebuild --platform android --clean

      - name: 💾 Free up disk space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: 🔨 Build Android APK
        env:
          GRADLE_OPTS: "-Xmx8g -XX:MaxMetaspaceSize=2g -XX:+UseG1GC -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false -Dci=true"
        run: |
          # Final Java environment verification
          echo "Current JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "Java version check:"
          java -version
          
          # Ensure JAVA_HOME is available for Gradle
          if [ ! -f "$JAVA_HOME/bin/java" ]; then
            echo "ERROR: Java binary not found at expected location"
            echo "Searching for Java binary..."
            which java
            JAVA_BIN_PATH=$(which java)
            if [ -n "$JAVA_BIN_PATH" ]; then
              export JAVA_HOME=$(dirname $(dirname $JAVA_BIN_PATH))
              echo "Updated JAVA_HOME to: $JAVA_HOME"
            fi
          fi
          
          cd android
          chmod +x ./gradlew
          
          # Verify Gradle can find Java
          echo "Testing Gradle Java detection..."
          ./gradlew --version
          
          # Clean build directory
          ./gradlew clean
          # Build with memory optimizations and skip lint
          ./gradlew assembleRelease --no-daemon --max-workers=2 --no-parallel --stacktrace -Pci=true -x lintVitalAnalyzeRelease -x lintVitalReportRelease

      - name: 📦 Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: RObiStream-release
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: 🎉 Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## What's New
            - Bug fixes and improvements
            - Performance enhancements
            
            ## Installation
            Download the APK below and install on your Android device.
            
            **Note:** You may need to enable "Install from unknown sources" in your device settings.
          files: android/app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}