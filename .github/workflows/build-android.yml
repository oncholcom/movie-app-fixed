name: Build Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: 🏗 Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: 🔄 Setup Java 11 (Fallback)
        if: failure()
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: 🔧 Manual Java Setup (if needed)
        run: |
          # Find and set JAVA_HOME manually if the action failed
          if [ ! -d "$JAVA_HOME" ] || [ ! -f "$JAVA_HOME/bin/java" ]; then
            echo "Current JAVA_HOME is invalid: $JAVA_HOME"
            echo "Searching for Java installations..."
            
            # Search for Java 17 first (required for Android SDK)
            for java_path in \
              /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17*/x64 \
              /opt/hostedtoolcache/Java_Adopt_jdk/17*/x64 \
              /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11*/x64 \
              /opt/hostedtoolcache/Java_Adopt_jdk/11*/x64 \
              /usr/lib/jvm/java-*-openjdk* \
              /usr/lib/jvm/temurin-*; do
              
              if [ -f "$java_path/bin/java" ]; then
                export JAVA_HOME="$java_path"
                echo "JAVA_HOME=$java_path" >> $GITHUB_ENV
                echo "Found and set JAVA_HOME to: $java_path"
                "$java_path/bin/java" -version
                break
              fi
            done
            
            # Last resort: use system java
            if [ ! -d "$JAVA_HOME" ]; then
              SYSTEM_JAVA=$(which java)
              if [ -n "$SYSTEM_JAVA" ]; then
                JAVA_HOME=$(dirname $(dirname $SYSTEM_JAVA))
                echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
                echo "Using system Java: $JAVA_HOME"
              fi
            fi
          fi
          
          echo "Final JAVA_HOME: $JAVA_HOME"
          # Check Java version for Android SDK compatibility
          JAVA_VERSION=$($JAVA_HOME/bin/java -version 2>&1 | head -n 1 | cut -d'"' -f2)
          echo "Java version: $JAVA_VERSION"
          
          # Set skip flag if Java version is less than 17
          if [[ "$JAVA_VERSION" < "17" ]]; then
            echo "SKIP_JDK_VERSION_CHECK=true" >> $GITHUB_ENV
            echo "Java version is less than 17, setting SKIP_JDK_VERSION_CHECK=true"
          fi

      - name: 🏗 Setup Android SDK
        uses: android-actions/setup-android@v3
        env:
          SKIP_JDK_VERSION_CHECK: true
          
      - name: 🔍 Verify Android SDK Setup
        run: |
          echo "Android SDK Root: $ANDROID_SDK_ROOT"
          echo "Android Home: $ANDROID_HOME"
          echo "Java Home: $JAVA_HOME"
          
          # Check if SDK manager is available
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "✅ SDK Manager found at: $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          else
            echo "⚠️ SDK Manager not found in expected location"
            find /usr/local/lib/android/sdk -name "sdkmanager" 2>/dev/null || echo "No sdkmanager found"
          fi
          
          # List installed packages
          echo "Installed Android SDK packages:"
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed 2>/dev/null | head -10 || echo "Could not list SDK packages"

      - name: 📦 Cache Gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper/
          key: gradle-wrapper-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-wrapper-

      - name: 📦 Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches/
          key: gradle-cache-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-cache-

      - name: 📦 Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔐 Create .env from GitHub Secrets
        env:
          MOBILE_API_BASE_URL: ${{ secrets.MOBILE_API_BASE_URL }}
          MOBILE_API_KEY: ${{ secrets.MOBILE_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        run: |
          # Create .env only if not present in repo
          if [ ! -f .env ]; then
            if [ -z "$MOBILE_API_BASE_URL" ] || [ -z "$MOBILE_API_KEY" ]; then
              echo "Missing required secrets: MOBILE_API_BASE_URL and/or MOBILE_API_KEY" >&2
              exit 1
            fi
            cat > .env <<EOF
          MOBILE_API_BASE_URL=$MOBILE_API_BASE_URL
          MOBILE_API_KEY=$MOBILE_API_KEY
          ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
          EOF
          fi
          # Copy to android as a safety net for path resolution during bundling
          cp .env android/.env

      - name: 🔧 Install Expo CLI
        run: npm install -g @expo/ngrok@^4.1.0 expo-cli eas-cli

      - name: 🏗 Prebuild Android
        run: npx expo prebuild --platform android --clean

      - name: 🧠 Free up disk space
        run: |
          # Clean up to free memory and disk space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: 🔨 Build Android APK
        working-directory: android
        run: |
          echo "Building with JAVA_HOME: $JAVA_HOME"
          
          # Verify Java is accessible
          if [ -f "$JAVA_HOME/bin/java" ]; then
            "$JAVA_HOME/bin/java" -version
          else
            echo "Warning: JAVA_HOME/bin/java not found, using system java"
            java -version
          fi
          
          chmod +x ./gradlew
          ./gradlew assembleRelease --no-daemon --stacktrace \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g -Dfile.encoding=UTF-8"

      - name: 📦 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RObiStream-release
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 90

      - name: 🎉 Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: RobiStream v1.0.${{ github.run_number }}
          body: |
            ## 🎬 RobiStream Release
            
            ### What's New
            - Performance improvements
            - Bug fixes and optimizations
            - UI enhancements
            
            ### 📥 Installation
            Download the APK below and install on your Android device.
            
            **Version:** 1.0.${{ github.run_number }}
            **Build Date:** ${{ github.event.head_commit.timestamp }}
            
            **Note:** You may need to enable "Install from unknown sources" in your device settings.
          files: android/app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}